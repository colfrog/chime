(in-package :chime)

(defclass king (piece)
  ((kind :initform "king")))

(defmethod possible-moves ((king king) (board board))
  (with-slots (fields) board
    (with-slots (colour field) king
      (let ((moves '()))
	(dotimes (i 3)
	  (dotimes (j 3)
	    (let ((row (+ (row field) (1- i)))
		  (col (+ (col field) (1- j))))
	      (when (and (<= 0 row 7)
			 (<= 0 col 7))
		(let ((other-field (aref fields row col)))
		  (when (and (not (is-checked other-field board colour))
			     (or (and (piece other-field)
				      (string/= (colour (piece other-field)) colour))
				 (not (piece other-field))))
		    (push (cons row col) moves)))))))
	(when (equal (get-position field) (if (string= colour "white")
					     '(7 . 4)
					     '(0 . 4)))
	  (let ((row (row field)))
	    ;; short castle
	    (let* ((col1 5) (col2 6)
		   (field1 (aref fields row col1))
		   (field2 (aref fields row col2))
		   (rook (piece (aref fields
				      (if (string= colour "white") 7 0)
				      7))))
	      (when (and rook (not (piece field1)) (not (piece field2))
			 (not (is-checked field1 board colour))
			 (not (is-checked field2 board colour))
			 (not (piece-has-moved king))
			 (string= "rook" (kind rook))
			 (not (piece-has-moved rook)))
		(push (cons (if (string= colour "white") 7 0) 6) moves)))
	    ;; long castle
	    (let* ((col1 1) (col2 2) (col3 3)
		   (field1 (aref fields row col1))
		   (field2 (aref fields row col2))
		   (field3 (aref fields row col3))
		   (rook (piece (aref fields
				      (if (string= colour "white") 7 0)
				      0))))
	      (when (and rook (not (piece field1)) (not (piece field2)) (not (piece field3))
			 (not (is-checked field1 board colour))
			 (not (is-checked field2 board colour))
			 (not (is-checked field3 board colour))
			 (not (piece-has-moved king))
			 (string= "rook" (kind rook))
			 (not (piece-has-moved rook)))
		(push (cons (if (string= colour "white") 7 0) 2) moves)))))
	moves))))
